(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{215:function(t,a,e){"use strict";e.r(a);var r=e(0),s=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h3",{attrs:{id:"java抽象类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java抽象类","aria-hidden":"true"}},[t._v("#")]),t._v(" Java抽象类")]),t._v(" "),e("p",[t._v("抽象类不能实例化对象，并且必须被继承，基于这个原因决定要不要设计抽象类")]),t._v(" "),e("h5",{attrs:{id:"抽象方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#抽象方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 抽象方法")]),t._v(" "),e("blockquote",[e("p",[t._v("如果你想设计这样一个类，该类包含一个特别的成员方法，该方法的具体实现由它的子类确定，那么你可以在父类中声明该方法为抽象方法。")])]),t._v(" "),e("p",[e("strong",[t._v("声明抽象方法会造成以下两个结果：")])]),t._v(" "),e("ul",[e("li",[t._v("如果一个类包含抽象方法，那么该类必须是抽象类。")]),t._v(" "),e("li",[t._v("任何子类必须重写父类的抽象方法，或者声明自身为抽象类。")]),t._v(" "),e("li",[t._v("最后必须又子类实现该抽象方法，否则，从最初的父类到最终的子类都不能用来实例化对象。")])])])}),[],!1,null,null,null);a.default=s.exports}}]);