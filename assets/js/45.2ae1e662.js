(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{244:function(e,t,s){"use strict";s.r(t);var a=s(0),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"assert-断言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#assert-断言","aria-hidden":"true"}},[e._v("#")]),e._v(" assert(断言)")]),e._v(" "),s("h3",{attrs:{id:"assert-assertionerror-类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#assert-assertionerror-类","aria-hidden":"true"}},[e._v("#")]),e._v(" assert.AssertionError 类")]),e._v(" "),s("blockquote",[s("p",[e._v("表明断言的失败。 assert 模块抛出的所有错误都将是 AssertionError 类的实例。")])]),e._v(" "),s("p",[s("code",[e._v("new assert.AssertionError(options)")]),e._v("\n简要说明：使用options参数设置实例的相关属性")]),e._v(" "),s("div",{staticClass:"language-node.js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const { message } = new assert.AssertionError({\n  actual: 1,\n  expected: 2,\n  operator: 'strictEqual'\n});\n")])])]),s("h4",{attrs:{id:"上例中使用了es6语法-解构，参见解构赋值-菜鸟"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#上例中使用了es6语法-解构，参见解构赋值-菜鸟","aria-hidden":"true"}},[e._v("#")]),e._v(" 🔊上例中使用了ES6语法--解构，参见"),s("a",{attrs:{href:"https://www.runoob.com/w3cnote/deconstruction-assignment.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("解构赋值-菜鸟"),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("使用场景：当需要自定义AssertionError 类的时候")]),e._v(" "),s("p",[e._v("详见："),s("a",{attrs:{href:"http://nodejs.cn/api/assert.html#assert_class_assert_assertionerror",target:"_blank",rel:"noopener noreferrer"}},[e._v("传送门"),s("OutboundLink")],1)]),e._v(" "),s("hr"),e._v(" "),s("h3",{attrs:{id:"assert"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#assert","aria-hidden":"true"}},[e._v("#")]),e._v(" assert")]),e._v(" "),s("p",[s("code",[e._v("assert(value[, message])")])]),e._v(" "),s("p",[e._v("简要说明：检查value参数是否为真")]),e._v(" "),s("h4",{attrs:{id:"其中参数-message-表示选输项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其中参数-message-表示选输项","aria-hidden":"true"}},[e._v("#")]),e._v(" 🔊其中参数[,message]表示选输项")]),e._v(" "),s("p",[e._v("使用场景：")]),e._v(" "),s("hr"),e._v(" "),s("h3",{attrs:{id:"assert-strictequal"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#assert-strictequal","aria-hidden":"true"}},[e._v("#")]),e._v(" assert.strictEqual")]),e._v(" "),s("p",[s("code",[e._v("assert.strictEqual(actual, expected[, message])")])]),e._v(" "),s("p",[e._v("简要说明：测试 actual 参数和 expected 参数之间的严格相等性，使用 SameValue比较。")]),e._v(" "),s("div",{staticClass:"language-node.js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const assert = require('assert').strict;\n\n// 1 !== 2\nassert.strictEqual(1, 2);\n\n// OK\nassert.strictEqual(1, 1);\n\n//不等\nassert.strictEqual('Hello foobar', 'Hello World!');\n\n// AssertionError [ERR_ASSERTION]: apples 1 !== oranges 2\nconst apples = 1;\nconst oranges = 2;\nassert.strictEqual(apples, oranges, `apples ${apples} !== oranges ${oranges}`);\n\n// TypeError: Inputs are not identical\nassert.strictEqual(1, '1', new TypeError('Inputs are not identical'));\n")])])]),s("p",[e._v("如果值不严格相等，则抛出 AssertionError，并将 message 属性设置为等于 message 参数的值。 如果未定义 message 参数，则会分配默认错误消息。 如果 message 参数是 Error 的实例，则它将被抛出而不是 AssertionError。")]),e._v(" "),s("p",[e._v("使用场景：")]),e._v(" "),s("p",[e._v("详见："),s("a",{attrs:{href:"http://nodejs.cn/api/assert.html#assert_assert_strictequal_actual_expected_message",target:"_blank",rel:"noopener noreferrer"}},[e._v("传送门"),s("OutboundLink")],1)]),e._v(" "),s("hr"),e._v(" "),s("h3",{attrs:{id:"assert-deepstrictequal"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#assert-deepstrictequal","aria-hidden":"true"}},[e._v("#")]),e._v(" assert.deepStrictEqual")]),e._v(" "),s("p",[s("code",[e._v("assert.deepStrictEqual(actual, expected[, message])")])]),e._v(" "),s("p",[e._v("简要说明：测试 actual 参数和 expected 参数之间的深度相等")]),e._v(" "),s("div",{staticClass:"language-node.js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const assert = require('assert').strict;\n\n// 1.失败，因为 1 !== '1'。\nassert.deepStrictEqual({ a: 1 }, { a: '1' });\n\n// 2.以下对象没有自身属性。\nconst date = new Date();\nconst object = {};\nconst fakeDate = {};\nObject.setPrototypeOf(fakeDate, Date.prototype);\n：\n\nassert.deepStrictEqual(object, fakeDate);\n// 原型不同\nassert.deepStrictEqual(date, fakeDate);\n// 类型标签不同：\n\n// 3.通过，因为使用 SameValue 比较。\nassert.deepStrictEqual(NaN, NaN);\n\n// 4.解封装后的数字不同：\nassert.deepStrictEqual(new Number(1), new Number(2));\n\n// 5.通过，因为对象与解封装后的字符串都是相同的。\nassert.deepStrictEqual(new String('foo'), Object('foo'));\n\n// 6.通过。\nassert.deepStrictEqual(-0, -0);\n\n// 7.使用 SameValue 比较的零不同：\nassert.deepStrictEqual(0, -0);\n\n// 8.\nconst symbol1 = Symbol();\nconst symbol2 = Symbol();\nassert.deepStrictEqual({ [symbol1]: 1 }, { [symbol1]: 1 });\n\n// 通过，因为在两个对象上的 symbol 相同。\nassert.deepStrictEqual({ [symbol1]: 1 }, { [symbol2]: 1 });\n\n// 9.\nconst weakMap1 = new WeakMap();\nconst weakMap2 = new WeakMap([[{}, {}]]);\nconst weakMap3 = new WeakMap();\nweakMap3.unequal = true;\n\n// 通过，因为无法比较条目。\nassert.deepStrictEqual(weakMap1, weakMap2);\n\n// 失败，因为 weakMap3 有一个 weakMap1 不包含的属性：\nassert.deepStrictEqual(weakMap1, weakMap3);\n")])])]),s("p",[e._v("如果值不相等，则抛出 AssertionError，并将 message 属性设置为等于 message 参数的值。 如果未定义 message 参数，则会分配默认错误消息。 如果 message 参数是 Error 的实例，那么它将被抛出而不是 AssertionError。")]),e._v(" "),s("p",[e._v("使用场景：")]),e._v(" "),s("p",[e._v("详见："),s("a",{attrs:{href:"http://nodejs.cn/api/assert.html#assert_assert_deepstrictequal_actual_expected_message",target:"_blank",rel:"noopener noreferrer"}},[e._v("传送门"),s("OutboundLink")],1)]),e._v(" "),s("h5",{attrs:{id:"存疑："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#存疑：","aria-hidden":"true"}},[e._v("#")]),e._v(" 存疑：")]),e._v(" "),s("p",[s("code",[e._v("assert.deepStrictEqual(actual, expected[, message])")]),e._v("参数message如何传？")]),e._v(" "),s("hr"),e._v(" "),s("h3",{attrs:{id:"assert-notstrictequal"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#assert-notstrictequal","aria-hidden":"true"}},[e._v("#")]),e._v(" assert.notStrictEqual")]),e._v(" "),s("p",[s("code",[e._v("assert.notStrictEqual(actual, expected[, message])")])]),e._v(" "),s("p",[e._v("简要说明：测试 actual 参数和 expected 参数之间的严格不相等，使用 SameValue比较")]),e._v(" "),s("div",{staticClass:"language-node.js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const assert = require('assert').strict;\n\n// 通过\nassert.notStrictEqual(1, 2);\n\n//// AssertionError [ERR_ASSERTION]\nassert.notStrictEqual(1, 1);\n\n// 通过\nassert.notStrictEqual(1, '1');\n")])])]),s("p",[e._v("如果值严格相等，则抛出 AssertionError，并将 message 属性设置为等于 message 参数的值。 如果未定义 message 参数，则会分配默认错误消息。 如果 message 参数是 Error 的实例，则它将被抛出而不是 AssertionError")]),e._v(" "),s("p",[e._v("使用场景：")]),e._v(" "),s("p",[e._v("详见："),s("a",{attrs:{href:"http://nodejs.cn/api/assert.html#assert_assert_notstrictequal_actual_expected_message",target:"_blank",rel:"noopener noreferrer"}},[e._v("传送门"),s("OutboundLink")],1)]),e._v(" "),s("hr"),e._v(" "),s("h3",{attrs:{id:"assert-notdeepstrictequal"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#assert-notdeepstrictequal","aria-hidden":"true"}},[e._v("#")]),e._v(" assert.notDeepStrictEqual")]),e._v(" "),s("p",[s("code",[e._v("assert.notDeepStrictEqual(actual, expected[, message])")])]),e._v(" "),s("p",[e._v("简要说明：测试深度严格的不平等。 与 assert.deepStrictEqual() 相反。")]),e._v(" "),s("div",{staticClass:"language-node.js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const assert = require('assert').strict;\n\n// 通过。\nassert.notDeepStrictEqual({ a: 1 }, { a: '1' });\n")])])]),s("p",[e._v("如果值深度且严格相等，则抛出 AssertionError，并将 message 属性设置为等于 message 参数的值。 如果未定义 message 参数，则会分配默认错误消息。 如果 message 参数是 Error 的实例，则它将被抛出而不是 AssertionError。")]),e._v(" "),s("p",[e._v("使用场景：")]),e._v(" "),s("p",[e._v("详见："),s("a",{attrs:{href:"http://nodejs.cn/api/assert.html#assert_assert_notdeepstrictequal_actual_expected_message",target:"_blank",rel:"noopener noreferrer"}},[e._v("传送门"),s("OutboundLink")],1)]),e._v(" "),s("hr"),e._v(" "),s("blockquote",[s("p",[e._v("为减少记忆成本，其余assert相关内容在实际场景中使用到再进行补充,余下文章仅作记录。")])]),e._v(" "),s("h3",{attrs:{id:"assert-ok"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#assert-ok","aria-hidden":"true"}},[e._v("#")]),e._v(" assert.ok")]),e._v(" "),s("h3",{attrs:{id:"assert-rejects"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#assert-rejects","aria-hidden":"true"}},[e._v("#")]),e._v(" assert.rejects")]),e._v(" "),s("h3",{attrs:{id:"assert-doesnotreject"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#assert-doesnotreject","aria-hidden":"true"}},[e._v("#")]),e._v(" assert.doesNotReject")]),e._v(" "),s("h3",{attrs:{id:"assert-throws"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#assert-throws","aria-hidden":"true"}},[e._v("#")]),e._v(" assert.throws")]),e._v(" "),s("h3",{attrs:{id:"assert-doesnotthrow"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#assert-doesnotthrow","aria-hidden":"true"}},[e._v("#")]),e._v(" assert.doesNotThrow")]),e._v(" "),s("h3",{attrs:{id:"assert-fail"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#assert-fail","aria-hidden":"true"}},[e._v("#")]),e._v(" assert.fail")])])}),[],!1,null,null,null);t.default=r.exports}}]);