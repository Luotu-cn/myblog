(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{218:function(t,e,n){"use strict";n.r(e);var s=n(0),a=Object(s.a)({},(function(){var t=this.$createElement,e=this._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("h3",{attrs:{id:"stack类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stack类","aria-hidden":"true"}},[this._v("#")]),this._v(" Stack类")]),this._v(" "),e("p",[this._v("栈是Vector的一个子类，它实现了一个标准的后进先出的栈。\n堆栈只定义了默认构造函数，用来创建一个空栈。")]),this._v(" "),e("blockquote",[e("p",[this._v("除了有Vector定义的所有方法，自己也定义了一些方法\n方法|方法描述\n:-😐:-:\nboolean empty()|测试堆栈是否为空\nObject peek()|查看堆栈顶部的对象，但不从堆栈中移除它\nObject pop()|移除堆栈顶部的对象，并作为此函数的值返回该对象\nObject push(Object element)|把项压入堆栈顶部\nint search(Object element)|返回对象在堆栈中的位置，以 1 为基数")])])])}),[],!1,null,null,null);e.default=a.exports}}]);