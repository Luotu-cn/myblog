(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{227:function(t,a,v){"use strict";v.r(a);var e=v(0),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h3",{attrs:{id:"接口"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#接口","aria-hidden":"true"}},[t._v("#")]),t._v(" 接口")]),t._v(" "),v("blockquote",[v("p",[t._v("类描述对象的属性和方法。接口则包含类要实现的方法。除非实现接口的类是抽象类，否则该类要定义接口中的所有方法。")])]),t._v(" "),v("p",[t._v("▲在Java中，接口类型可用来声明一个变量，他们可以成为一个空指针，或是被绑定在一个以此接口实现的对象。")]),t._v(" "),v("p",[v("strong",[t._v("接口与类的区别：")])]),t._v(" "),v("ul",[v("li",[t._v("接口不能用于实例化对象。")]),t._v(" "),v("li",[t._v("接口中没有构造方法")]),t._v(" "),v("li",[t._v("接口中所有的方法必须是抽象方法")]),t._v(" "),v("li",[t._v("接口不能包含成员变量，除了static和final变量")]),t._v(" "),v("li",[t._v("接口不是被类继承了，而是要被类实现")]),t._v(" "),v("li",[t._v("接口支持多继承")])]),t._v(" "),v("p",[v("strong",[t._v("接口有以下特性：")])]),t._v(" "),v("ul",[v("li",[t._v("接口是隐式抽象的，当声明一个接口的时候，不必使用abstract关键字。")]),t._v(" "),v("li",[t._v("接口中每一个方法也是隐式抽象的，声明时同样不需要abstract关键子。")]),t._v(" "),v("li",[t._v("接口中的方法都是公有的。")])]),t._v(" "),v("p",[v("strong",[t._v("重写接口中声明的方法时，需要注意以下规则：")])]),t._v(" "),v("ul",[v("li",[t._v("类在实现接口的方法时，不能抛出强制性异常，只能在接口中，或者继承接口的抽象类中抛出该强制性异常。")]),t._v(" "),v("li",[t._v("类在重写方法时要保持一致的方法名，并且应该保持相同或者相兼容的返回值类型。")]),t._v(" "),v("li",[t._v("如果实现接口的类是抽象类，那么就没必要实现该接口的方法。")])]),t._v(" "),v("p",[v("strong",[t._v("在实现接口的时候，也要注意一些规则：")])]),t._v(" "),v("ul",[v("li",[t._v("一个类可以同时实现多个接口。")]),t._v(" "),v("li",[t._v("一个类只能继承一个类，但是能实现多个接口。")]),t._v(" "),v("li",[t._v("一个接口能继承另一个接口，这和类之间的继承比较相似。")])]),t._v(" "),v("h4",{attrs:{id:"接口的继承"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#接口的继承","aria-hidden":"true"}},[t._v("#")]),t._v(" 接口的继承")]),t._v(" "),v("blockquote",[v("p",[t._v("一个接口能继承另一个接口，和类之间的继承方式比较相似。接口的继承使用extends关键字，子接口继承父接口的方法。")])]),t._v(" "),v("p",[t._v("接口的多重继承中extends关键字只需要使用一次，在其后跟着继承接口。\n'public interface Hockey extends Sports, Event'")]),t._v(" "),v("h5",{attrs:{id:"标记接口"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#标记接口","aria-hidden":"true"}},[t._v("#")]),t._v(" 标记接口")]),t._v(" "),v("blockquote",[v("p",[t._v("最常用的继承接口是没有包含任何方法的接口。"),v("br"),t._v("\n标识接口是没有任何方法和属性的接口.它仅仅表明它的类属于一个特定的类型,供其他代码来测试允许做一些事情。")])]),t._v(" "),v("p",[t._v("例如：java.awt.event包中的MouseListener接口继承的java.util.EventListener接口定义如下")]),t._v(" "),v("div",{staticClass:"language-java extra-class"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EventListener")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),v("p",[t._v("没有任何方法的接口被称为标记接口。标记接口主要用于以下两种目的:")]),t._v(" "),v("ul",[v("li",[t._v("建立一个公共的父接口："),v("br"),t._v("\n正如EventListener接口，这是由几十个其他接口扩展的Java API，你可以使用一个标记接口来建立一组接口的父接口。例如：当一个接口继承了EventListener接口，Java虚拟机(JVM)就知道该接口将要被用于一个事件的代理方案。")]),t._v(" "),v("li",[t._v("向一个类添加数据类型："),v("br"),t._v("\n这种情况是标记接口最初的目的，实现标记接口的类不需要定义任何接口方法(因为标记接口根本就没有方法)，但是该类通过多态性变成一个接口类型。")])])])}),[],!1,null,null,null);a.default=s.exports}}]);