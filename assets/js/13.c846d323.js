(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{216:function(r,t,e){"use strict";e.r(t);var i=e(0),n=Object(i.a)({},(function(){var r=this,t=r.$createElement,e=r._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[e("h3",{attrs:{id:"stringbuilder和stringbuffer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stringbuilder和stringbuffer","aria-hidden":"true"}},[r._v("#")]),r._v(" StringBuilder和Stringbuffer")]),r._v(" "),e("p",[r._v("对字符串进行修改的时候，需要使用StringBuffer和StringBuilder类。"),e("br"),r._v("\nStringBuffer和StringBuilder类的对象能够被多次的修改，并且不产生新的未使用对象。")]),r._v(" "),e("h5",{attrs:{id:"stringbuilder类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stringbuilder类","aria-hidden":"true"}},[r._v("#")]),r._v(" StringBuilder类")]),r._v(" "),e("p",[r._v("Java 5中被提出，它和"),e("strong",[r._v("StringBuffer")]),r._v("之间的最大不同在于StringBuilder的方法"),e("strong",[r._v("不是线程安全的")]),r._v("（线程安全就是多线程访问时，采用了加锁机制，当一个线程访问该类的某个数据时，进行保护，其他线程不能进行访问直到该线程读取完，其他线程才可使用,不会出现数据不一致或者数据污染。线程不安全就是不提供数据访问保护，有可能出现多个线程先后更改数据造成所得到的数据是脏数据）。"),e("br"),r._v(" "),e("strong",[r._v("StringBuilder相较于StringBuffer有速度优势")]),r._v("，所以多数情况下建议使用StringBuilder类。然而在应用程序"),e("strong",[r._v("要求线程安全")]),r._v("的情况下，则必须"),e("strong",[r._v("使用StringBuffer类")]),r._v("。")]),r._v(" "),e("h4",{attrs:{id:"stringbuffer方法（其他方法同string类似"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stringbuffer方法（其他方法同string类似","aria-hidden":"true"}},[r._v("#")]),r._v(" Stringbuffer方法（其他方法同string类似)")]),r._v(" "),e("p",[e("img",{attrs:{src:"https://note.youdao.com/yws/api/personal/file/C02988A99B7B4653BE999456CA2204CD?method=download&shareKey=0d6fb7832fdcb5660ca2cc0b62a4834b",alt:"image"}})])])}),[],!1,null,null,null);t.default=n.exports}}]);